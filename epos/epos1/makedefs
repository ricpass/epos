# EPOS Makefile Definitions

# Functions
GETTK		= $(shell sed -n -e '/^.* $(1)[ ]*=.*;.*$$/s/^.* =[ ]*\(.*\)[ ]*;.*$$/\1/p' $(2))

# Paths, prefixes and suffixes
EPOS		:= $(abspath $(dir $(filter %makedefs, $(MAKEFILE_LIST))))
TOP		:= $(EPOS)
INCLUDE		:= $(TOP)/include
SRC		:= $(TOP)/src
APP		:= $(TOP)/app
BIN		:= $(TOP)/bin
LIB		:= $(TOP)/lib
IMG		:= $(TOP)/img
ETC		:= $(TOP)/etc
DOC		:= $(TOP)/doc
LARCHNAME	:= arch
LMACHNAME	:= mach
LSYSNAME	:= system
LINITNAME	:= init
LUTILNAME	:= util

# Supported software architectures
MODE_LIBRARY	:= library

# Supported hardware architectures
ARCH_IA32       := ia32

# Supported machines
MACH_PC		:= pc

# Makefile hacks
APPLICATIONS	:= $(subst .cc,,$(shell find $(APP) -name \*.cc -printf "%f\n"))

ifeq ($(words $(APPLICATIONS)),1)
ifndef APPLICATION
APPLICATION	:= $(word 1, $(APPLICATIONS))
endif
else
PRECLEAN	:= clean1
endif

ifndef APPLICATION
ifneq ($(abspath $(dir $(filter %makefile, $(MAKEFILE_LIST)))),$(TOP))
.PHONY: error
error:
		@echo "ERROR: On a multiple applications setup, make must be invoked from $(TOP)!"
		@exit -1
endif
endif

# System configuration
TRAITS		= $(APP)/$(APPLICATION)_traits.h
MODE		= $(MODE_$(call GETTK,MODE,$(TRAITS)))
ARCH		= $(ARCH_$(call GETTK,ARCH,$(TRAITS)))
MACH		= $(MACH_$(call GETTK,MACH,$(TRAITS)))
LIBARCH		= $(LIB)/lib$(LARCHNAME)_$(ARCH).a
LIBMACH		= $(LIB)/lib$(LMACHNAME)_$(ARCH).a
LIBSYS		= $(LIB)/lib$(LSYSNAME)_$(ARCH).a
LIBINIT		= $(LIB)/lib$(LINITNAME)_$(ARCH).a
LIBUTIL		= $(LIB)/lib$(LUTILNAME)_$(ARCH).a
LARCH		= $(LARCHNAME)_$(ARCH)
LMACH		= $(LMACHNAME)_$(ARCH)
LSYS		= $(LSYSNAME)_$(ARCH)
LINIT		= $(LINITNAME)_$(ARCH)
LUTIL		= $(LUTILNAME)_$(ARCH)
# Compiler prefixes
$(ARCH_IA32)_COMP_PREFIX	:= /usr/local/ia32/gcc-4.4.4/bin/ia32-
COMP_PREFIX			= $($(ARCH)_COMP_PREFIX)

# Boot Memory Map
MACH_TRAITS	= $(INCLUDE)/mach/$(MACH)/traits.h 
MEM_BASE	= $(call GETTK,MEM_BASE,$(MACH_TRAITS))
MEM_TOP		= $(call GETTK,MEM_TOP,$(MACH_TRAITS))
MEM_SIZE	= $(shell echo "(`printf "%d" $(MEM_TOP)` - `printf "%d" $(MEM_BASE)`) / 1024 / 1024"|bc)
BOOT_ADDR	= $(call GETTK,BOOT,$(MACH_TRAITS))
SETUP_ADDR	= $(call GETTK,SETUP,$(MACH_TRAITS))
INIT_ADDR	= $(call GETTK,INIT,$(MACH_TRAITS))
SYS_CODE_ADDR	= $(call GETTK,SYS_CODE,$(MACH_TRAITS))
SYS_DATA_ADDR	= $(call GETTK,SYS_DATA,$(MACH_TRAITS))
APP_CODE_ADDR	= $(call GETTK,APP_CODE,$(MACH_TRAITS))
APP_DATA_ADDR	= $(call GETTK,APP_DATA,$(MACH_TRAITS))
BOOT_LENGTH_MIN	= $(call GETTK,BOOT_LENGTH_MIN,$(MACH_TRAITS))
BOOT_LENGTH_MAX = $(call GETTK,BOOT_LENGTH_MAX,$(MACH_TRAITS))

#Machine specifics
$(MACH_PC)_CC_FLAGS	:= -Wa,--32
$(MACH_PC)_AS_FLAGS	:= --32
$(MACH_PC)_LD_FLAGS	:= 
$(MACH_PC)_CODE_NAME	:= .init
$(MACH_PC)_DATA_NAME	:= .ctors
ifeq ($(GDB),1)
$(MACH_PC)_EMULATOR	= qemu -s -S -m $(MEM_SIZE) -nographic -no-reboot -net nic,model=pcnet -net user -fda
else
$(MACH_PC)_EMULATOR	= qemu -m $(MEM_SIZE) -nographic -no-reboot -net nic,model=pcnet -net user -fda
endif
ifeq ($(MODE), library)
$(MACH_PC)_DEBUGGER	= xterm -e gdb -ex "target remote:1234" -ex "set confirm off" -ex "add-symbol-file pc_setup $(SETUP_ADDR)"
else
$(MACH_PC)_DEBUGGER	= xterm -e gdb -ex "target remote:1234" -ex "set confirm off" -ex "add-symbol-file pc_setup $(SETUP_ADDR)" -ex "add-symbol-file pc_init $(INIT_ADDR)" -ex "add-symbol-file pc_system $(SYS_CODE_ADDR)"
endif
MACH_CC_FLAGS		= $($(MACH)_CC_FLAGS)
MACH_AS_FLAGS		= $($(MACH)_AS_FLAGS)
MACH_LD_FLAGS		= $($(MACH)_LD_FLAGS)
MACH_CODE_NAME		= $($(MACH)_CODE_NAME)
MACH_DATA_NAME		= $($(MACH)_DATA_NAME)
MACH_EMULATOR		= $($(MACH)_EMULATOR)
MACH_DEBUGGER		= $($(MACH)_DEBUGGER)
ifeq ($(GDB),1)
MACH_CC_FLAGS		:= -g -feliminate-unused-debug-symbols $(MACH_CC_FLAGS)
MACH_AS_FLAGS		:= -g $(MACH_AS_FLAGS)
endif

# Architecture specifics
ARCH_LITTLE	:= little
ARCH_BIG	:= big
ARCH_TRAITS	= $(INCLUDE)/arch/$(ARCH)/traits.h 
ARCH_ENDIANESS	= $(ARCH_$(call GETTK,ENDIANESS,$(ARCH_TRAITS)))
ARCH_WORD_SIZE	= $(call GETTK,WORD_SIZE,$(ARCH_TRAITS))
ARCH_CLOCK	= $(call GETTK,CLOCK,$(ARCH_TRAITS))

# Tools and flags to compile system tools
TCC		:= gcc -ansi -c -Werror
TCCFLAGS	:= -Wall -O2 -I$(INCLUDE)

TCXX		:= g++ -c -ansi -fno-exceptions
TCXXFLAGS	:= -Wall -O2 -I$(INCLUDE)

TCPP		:= gcc -E 
TCPPFLAGS	:= -I$(INCLUDE)

TLD		:= gcc
TLDFLAGS	:=

# Tools and flags to compile applications
ACC		= $(BIN)/eposcc $(MACH_CC_FLAGS) -c -ansi -O2
ACXX		= $(BIN)/eposcc $(MACH_CC_FLAGS) -c -ansi -O2
AF77		= $(BIN)/eposcc $(MACH_CC_FLAGS) -c -ansi -O2
ALD		= $(BIN)/eposcc --$(MODE) $(MACH_LD_FLAGS)
ALDFLAGS	:= --gc-sections 

# Tools and flags to compile the system
AR		= $(COMP_PREFIX)ar
ARFLAGS		:= rcs

AS		= $(COMP_PREFIX)as
ASFLAGS		= $(MACH_AS_FLAGS)

CC		= $(COMP_PREFIX)gcc -ansi -c 
CCFLAGS		= $(MACH_CC_FLAGS) -O2 -nostdinc -Wall -Werror -I$(INCLUDE)
CCLIB		= `$(CC) $(MACH_CC_FLAGS) -print-file-name=`

CPP		= $(COMP_PREFIX)gcc -E
CPPFLAGS	= $(MACH_CC_FLAGS) -I$(INCLUDE)

CXX		= $(COMP_PREFIX)g++ -c --no-exceptions --no-rtti --no-use-cxa-atexit
CXXFLAGS	= $(MACH_CC_FLAGS) -O2 -nostdinc -Wall -Werror -fdata-sections -ffunction-sections -I$(INCLUDE)

LD		= $(COMP_PREFIX)ld
LDFLAGS		= $(MACH_LD_FLAGS) -nostdlib -L$(LIB) -Bstatic

OBJCOPY		= $(COMP_PREFIX)objcopy
OBJCOPYFLAGS	:=

OBJDUMP		= $(COMP_PREFIX)objdump
OBJDUMPFLAGS	:=

MAKE		:= make
MAKECLEAN	:= make -i clean
MAKETEST	:= make test
MAKEFLAGS	:= --no-builtin-rules --print-directory

MKBI		:= $(BIN)/eposmkbi $(EPOS)

DD		:= dd

STRIP		= $(COMP_PREFIX)strip -R .note -R .comment

INSTALL		:= install

SHELL		:= bash

CLEAN		:= rm -f
CLEANDIR	:= rm -rf

TOUCH		:= touch

TEE		:= tee

EMULATOR	= $(MACH_EMULATOR) 

DEBUGGER	= $(MACH_DEBUGGER) 

# Rules
lib%.o: lib%.cc
		$(CXX) $(CXXFLAGS) $<

%_test_traits.h: %_test.cc
		$(INSTALL) $(INCLUDE)/system/traits.h $@

%_test.o: %_test.cc
		$(ACXX) $(ACXXFLAGS) $<

%_test.o: %_test.c
		$(ACC) $(ACCFLAGS) $<

%_test: %_test.o
		$(ALD) $(ALDFLAGS) $< -o $@
		$(STRIP) $@ -o $(IMG)/$@

%.img: %
		$(MKBI) $@ $<

%.out: %.img
		$(EMULATOR) $< | $(TEE) $@

%.o: %.cc
		$(CXX) $(CXXFLAGS) $<

%.o: %.c
		$(CC) $(CCFLAGS) $<

%.s: %.S
		$(CPP) $(CPPFLAGS) $< -o $@

%.o: %.s
		$(AS) $(ASFLAGS) $< -o $@

%: %.cc
		$(CXX) $(CXXFLAGS) $<
		$(LD) $(LDFLAGS) %@.o -o $@

%: %.c
		$(CC) $(CCFLAGS) $<
		$(LD) $(LDFLAGS) %@.o -o $@

(%.o): %.o
		$(AR) $(ARFLAGS) $@ $^

%.key: %.cc
		$(EPOSANL) $< 

%.key: %.c
		$(EPOSANL) $<

.PRECIOUS: %.o
